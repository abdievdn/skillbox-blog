CREATE DATABASE  IF NOT EXISTS `blog` /*!40100 DEFAULT CHARACTER SET utf8 */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `blog`;
-- MySQL dump 10.13  Distrib 8.0.26, for Win64 (x86_64)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	8.0.26

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `captcha_codes`
--

DROP TABLE IF EXISTS `captcha_codes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `captcha_codes` (
  `id` int NOT NULL AUTO_INCREMENT,
  `code` tinytext NOT NULL,
  `secret_code` tinytext NOT NULL,
  `time` datetime(6) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `captcha_codes`
--

LOCK TABLES `captcha_codes` WRITE;
/*!40000 ALTER TABLE `captcha_codes` DISABLE KEYS */;
INSERT INTO `captcha_codes` VALUES (7,'kese','1e6a0c90','2022-06-24 09:13:37.321232');
/*!40000 ALTER TABLE `captcha_codes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `global_settings`
--

DROP TABLE IF EXISTS `global_settings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `global_settings` (
  `id` int NOT NULL AUTO_INCREMENT,
  `code` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `value` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `global_settings`
--

LOCK TABLES `global_settings` WRITE;
/*!40000 ALTER TABLE `global_settings` DISABLE KEYS */;
INSERT INTO `global_settings` VALUES (1,'MULTIUSER_MODE','Многопользовательский режим','YES'),(2,'POST_PREMODERATION','Премодерация постов','YES'),(3,'STATISTICS_IS_PUBLIC','Показывать всем статистику блога','YES');
/*!40000 ALTER TABLE `global_settings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `post_comments`
--

DROP TABLE IF EXISTS `post_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `post_comments` (
  `id` int NOT NULL AUTO_INCREMENT,
  `text` text NOT NULL,
  `time` datetime(6) NOT NULL,
  `parent_id` int DEFAULT NULL,
  `post_id` int DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKc3b7s6wypcsvua2ycn4o1lv2c` (`parent_id`),
  KEY `FKaawaqxjs3br8dw5v90w7uu514` (`post_id`),
  KEY `FKsnxoecngu89u3fh4wdrgf0f2g` (`user_id`),
  CONSTRAINT `FKaawaqxjs3br8dw5v90w7uu514` FOREIGN KEY (`post_id`) REFERENCES `posts` (`id`),
  CONSTRAINT `FKc3b7s6wypcsvua2ycn4o1lv2c` FOREIGN KEY (`parent_id`) REFERENCES `post_comments` (`id`),
  CONSTRAINT `FKsnxoecngu89u3fh4wdrgf0f2g` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `post_comments`
--

LOCK TABLES `post_comments` WRITE;
/*!40000 ALTER TABLE `post_comments` DISABLE KEYS */;
INSERT INTO `post_comments` VALUES (1,'Обязательно прослушаю этот материал!','2022-05-27 11:34:52.527214',NULL,23,3),(2,'<strong>Mr. Two</strong>, уверен, что много полезностей подчерпнете : )','2022-05-29 11:35:44.965663',1,23,1),(3,'Это обязательно надо положить в закладки.','2022-06-23 14:55:58.004196',NULL,23,5),(4,'cool!','2022-07-22 19:13:29.981549',NULL,24,4),(5,'<strong>kAin</strong>, wow!','2022-07-22 19:13:44.204765',3,23,4);
/*!40000 ALTER TABLE `post_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `post_votes`
--

DROP TABLE IF EXISTS `post_votes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `post_votes` (
  `id` int NOT NULL AUTO_INCREMENT,
  `time` datetime(6) NOT NULL,
  `value` tinyint NOT NULL,
  `post_id` int DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK9jh5u17tmu1g7xnlxa77ilo3u` (`post_id`),
  KEY `FK9q09ho9p8fmo6rcysnci8rocc` (`user_id`),
  CONSTRAINT `FK9jh5u17tmu1g7xnlxa77ilo3u` FOREIGN KEY (`post_id`) REFERENCES `posts` (`id`),
  CONSTRAINT `FK9q09ho9p8fmo6rcysnci8rocc` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `post_votes`
--

LOCK TABLES `post_votes` WRITE;
/*!40000 ALTER TABLE `post_votes` DISABLE KEYS */;
INSERT INTO `post_votes` VALUES (1,'2022-06-23 11:32:19.518448',1,23,4),(2,'2022-06-23 11:32:41.192068',1,23,2),(3,'2022-06-23 11:32:49.502044',1,1,2),(4,'2022-06-23 11:33:50.328111',-1,12,2),(5,'2022-06-23 11:34:14.489986',1,23,3),(6,'2022-06-23 11:35:09.823430',1,23,1),(7,'2022-06-23 14:52:24.543120',1,23,5),(8,'2022-07-22 18:48:32.946224',1,24,6),(9,'2022-07-22 19:14:10.514615',1,24,4),(10,'2022-07-22 19:14:00.826152',-1,11,4);
/*!40000 ALTER TABLE `post_votes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `posts`
--

DROP TABLE IF EXISTS `posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `posts` (
  `id` int NOT NULL AUTO_INCREMENT,
  `is_active` tinyint NOT NULL,
  `moderation_status` enum('NEW','ACCEPTED','DECLINED') NOT NULL,
  `text` text NOT NULL,
  `time` datetime(6) NOT NULL,
  `title` varchar(255) NOT NULL,
  `view_count` int NOT NULL,
  `moderator_id` int DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK6m7nr3iwh1auer2hk7rd05riw` (`moderator_id`),
  KEY `FK5lidm6cqbc7u4xhqpxm898qme` (`user_id`),
  CONSTRAINT `FK5lidm6cqbc7u4xhqpxm898qme` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),
  CONSTRAINT `FK6m7nr3iwh1auer2hk7rd05riw` FOREIGN KEY (`moderator_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `posts`
--

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` VALUES (1,1,'ACCEPTED','<div><p>Этот шаблон предполагает использование одного класса, который отвечает за создание объекта и гарантирует, что он единственный, — то есть предотвращает создание экземпляра вне класса. Класс предоставляет прямой доступ к объекту без необходимости создавать экземпляр объекта класса. Чаще всего «Одиночку» используют для контроля доступа к какому-либо общему ресурсу.</p><p>Этот шаблон может пригодиться, например, в работе над драйвером базы данных. Если вы часто пишете код клиента, «Одиночку» можно применить, когда нужно узнать текущее состояние приложения.&nbsp;</p><p>Преимущество шаблона в том, что нужные данные можно получить в любое время. Однако, пользуясь «Одиночкой», вы ограничиваете круг тех, кто имеет прямой доступ к объекту, — теперь такая возможность есть только у клиентов.&nbsp;</p><p>Этот шаблон часто применяют не по назначению. Он полезен тогда, когда класс должен иметь только один экземпляр — ни больше ни меньше. Но некоторые разработчики пытаются использовать «Одиночку» вместо глобальных переменных.&nbsp;</p><p>Да, по своим параметрам Singleton и есть глобальная переменная, только под другим названием. Но если проще передать экземпляр класса ссылкой, чем предоставить к нему глобальный доступ, этот шаблон ни к чему. Так что проверяйте, правильно ли вы его применяете.</p><p></p></div><span style=\"font-style: italic;\">\npublic class Singleton {</span><div><span style=\"font-style: italic;\"><span style=\"white-space:pre\">	</span>private static final Singleton INSTANCE = new Singleton();</span></div><div><span style=\"font-style: italic;\"><span style=\"white-space:pre\">	</span>private Singleton() {\n    }&nbsp;</span></div><div><span style=\"font-style: italic;\"><span style=\"white-space:pre\">	</span>&nbsp;public static Singleton getInstance() {&nbsp;</span></div><div><span style=\"font-style: italic;\"><span style=\"white-space:pre\">		</span>&nbsp;return INSTANCE;&nbsp;</span></div><div><span style=\"font-style: italic;\"><span style=\"white-space:pre\">	</span>&nbsp;}&nbsp;</span></div><div><span style=\"font-style: italic;\">}</span></div>','2021-06-22 10:28:05.143967','Шаблон проектирования Одиночка (Singleton)',0,NULL,4),(2,1,'ACCEPTED','<p>В обычной жизни фасад — это наружная часть здания, за которой прячется всё его содержимое: стены и перегородки, утепление, трубы, провода и прочее. У паттерна «Фасад» та же функция: с его помощью вы можете красиво «облицевать» свой код. Иначе говоря, «Фасад» — это структурный паттерн проектирования, который предоставляет простой интерфейс сложной системе классов, библиотеке или фреймворку.</p><p>Например, в компиляторе есть синтаксический анализатор, лексический анализатор, токенизатор и другие интересные части, которых клиент не видит.&nbsp;</p><p>&nbsp;Преимущество использования «Фасада» в том, что он предоставляет клиенту понятный интерфейс. Если хотите, можете дать клиентам доступ и к «внутренностям» — но тогда будьте осторожны, не упрощайте интерфейс слишком сильно. Если увлечься этим, есть риск, что компилятор уже невозможно станет использовать или он не будет представлять никакой ценности.&nbsp;</p><p>&nbsp;Не перестарайтесь и с вертикальным масштабированием — иначе можно получить «фасад», привязанный к конкретному единичному случаю. Тогда он перестанет быть универсальным и окажется, по сути, бесполезным.</p><p><img src=\"/upload/f8/b2/e8/165588319778-7d0.jpg\"><br></p>','2021-06-26 10:33:48.175712','Шаблон проектирования Фасад (Facade)',0,1,4),(3,1,'ACCEPTED','<p>Этот паттерн позволяет разделить один большой класс или несколько тесно связанных между собой классов на две отдельные иерархии, которые можно разрабатывать вне зависимости друг от друга. Другими словами, это процесс постепенного добавления функциональности, при котором абстракция и реализация выделяются в разные классы.&nbsp;</p><p>&nbsp;«Мост» может быть полезен, когда разработчики пытаются расширить подклассы в двух независимых измерениях. Это частая проблема при использовании наследования, и Bridge пытается решить её, переключая наследование на композицию.&nbsp;</p><p>&nbsp;В паттерне используется интерфейс, который выступает в роли моста между классами абстракции и классами реализации. Если говорить терминами разработчиков, интерфейс «Моста» — это что-то вроде API. Шаблон упрощает поддержку существующего кода и снижает риск его сломать.</p><p><img src=\"/upload/78/24/25/165588357141-87b.jpg\"><br></p>','2021-09-22 10:39:38.449218','Шаблон проектирования Мост (Bridge)',0,6,4),(4,1,'ACCEPTED','<p>С помощью этого паттерна можно определить семейство алгоритмов, затем поместить каждый из них в собственный класс (их называют стратегиями) и сделать их объекты взаимозаменяемыми.</p><p>Представьте, что у вас есть код, который должен найти клиентов, отсортировать их и разослать им уведомления по электронной почте или SMS.</p><p>Паттерн «Стратегия» упростит задачу: он перенесёт механизм получения доступа к сведениям о клиентах и рассылки сообщений и писем в инфраструктурный слой.</p><p>Сортировка клиентов будет выделена в одну стратегию (которая поможет найти нужную целевую аудиторию), а оповещения — в другую (которая поможет решить, когда, где и каким образом вы хотите связаться с клиентами). В дальнейшем можно использовать эту библиотеку или систему в самых разных ситуациях, что значительно облегчит вашу работу.</p><p>Вообще, полезно иметь в запасе хорошие стратегии по умолчанию. Тогда если мы делаем рефакторинг, то берём уже написанные последовательности операций по сортировке клиентов и рассылке сообщений и создаём из них стратегии по умолчанию, которые другие смогут потом расширить. Иначе получится код, с которым придётся проводить много дополнительной работы, а ни один клиент этого не хочет.</p>','2021-12-31 11:41:21.158648','Шаблон проектирования Стратегия (Strategy)',14,6,4),(5,1,'ACCEPTED','<p>Сейчас этот паттерн очень популярен, его применяют практически везде. «Наблюдатель» обеспечивает свободную связь между издателем (создающим события) и подписчиком или подписчиками (отслеживающими события) и может использоваться где угодно.</p><p>Его недостаток в том, что им легко увлечься. Если события передаются постоянно, можно попасть в бесконечный их цикл, и тогда код будет тяжело отладить, он станет беспорядочным.</p><p>У этой проблемы есть два решения:&nbsp;</p><p></p><ul><li>Не используйте всегда одну и ту же очередь сообщений, у каждой из них должна быть своя цель.</li><li>Ограничивайте себя при использовании этого шаблона. Например: вы работаете над кодом клиента, у вас есть кнопка, пользователи её нажимают, событие происходит — всё, этого достаточно.</li><p><a href=\"https://refactoring.guru/ru/design-patterns/observer/java/example\">Пример на JAVA</a></p></ul>','2022-01-09 14:47:39.828929','Шаблон проектирования Наблюдатель (Observer)',1,1,4),(6,0,'NEW','<span style=\"font-family: GraphikLCG-Regular, stk; font-size: 18px; background-color: rgb(254, 245, 224);\">Паттерн (шаблон) проектирования&nbsp;— это типовое решение некоторой проблемы, которая часто возникает при разработке программ. Шаблоны используются многократно, их&nbsp;можно расширять и&nbsp;сочетать друг с&nbsp;другом. Применять их&nbsp;— хорошая практика, своего рода отраслевой стандарт.</span>','2022-06-22 10:45:54.135097','Шаблоны проектирования',0,NULL,4),(7,1,'ACCEPTED','Представляя развитие своей карьеры, разработчики часто думают о формальной смене статуса от джуниора к сеньору, от тимлида к архитектору ПО и так далее. Гораздо меньше они задумываются о навыках, которые нужны для перехода из одной роли в другую.\n\nРазвитие разработчика похоже на превращение из потребителя продукта в его создателя. Допустим, вы используете React или Angular. Это условная точка А. Тут вы просто применяете готовые решения. Конечный пункт — точка Б: здесь вы уже сами создаёте то, чем пользуются другие разработчики.\n\nЧтобы достичь заветной точки Б и соответствовать ей, нужно приобрести определённые навыки. Сперва — освоить язык программирования, затем изучить алгоритмы и структуры данных и, наконец, добраться до паттернов проектирования.','2022-06-22 10:47:19.178716','Шаблоны проектирования',0,6,4),(8,1,'ACCEPTED','<p>При создании программ 75% времени уходит вовсе не на программирование, а на тесты. Разбираемся, чем занимаются тестировщики и QA-инженеры.&nbsp;</p><p>Вероятно, ни одну вещь в мире нельзя сделать без ошибок, и программы не исключение. Допустим, вы написали код и не видите в нём явных багов. Как узнать, что будет при реальном использовании: поведёт ли себя программа так, как от неё ожидают?</p><h3>\nПочему важно тестировать программы</h3><p>Вот типичные программные баги:&nbsp;</p><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><ul><li>Вы вводите в поле ответ на вопрос и нажимаете Enter. После этого программа неожиданно завершает работу, не сохранив информацию. И та же ошибка повторяется в следующий раз.&nbsp;</li><li>Другой случай: вы играете, например, в какую-нибудь стрелялку. Неожиданно персонажи начинают хаотично двигаться, конвульсивно дёргаться, терять или отращивать конечности. И вообще ведут себя не так, как им положено. Некоторое время программа не реагирует на нажатие клавиш, после чего выдаёт «Game over».&nbsp;</li><li>Ещё один пример: вы заходите в личный кабинет интернет-магазина. Нажимаете «Оплатить», а вас выкидывает на главную страницу, да ещё и разлогинивает.&nbsp;</li></ul></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p><span style=\"font-family: GraphikLCG-Regular, stk; font-size: 14px; background-color: rgb(254, 245, 224);\">Программ без ошибок не бывает: любая может выдать непредсказуемый результат в ответ на самые обычные действия. Разработчик, скорее всего, не заметит этих дефектов в коде, зато конечному пользователю они могут отравить жизнь. Бывают ошибки мелкие и незначительные, а бывают и такие, что всё перестаёт работать.</span></p></blockquote><p>Прежде чем новая версия компьютерной программы, сайта или мобильного приложения попадает к пользователю, она должна пройти через руки инженеров-тестировщиков. Они ищут места в коде, где программа работает не так, как задумано. Чтобы найти как можно больше ошибок, тестировщики моделируют разные ситуации, которые могут возникнуть при использовании приложения.</p>','2022-02-05 13:37:27.979103','Что такое тестирование программ',0,1,2),(9,1,'ACCEPTED','<p>Пользователи непредсказуемы. Они могут делать то, что категорически не предусмотрено программой. Тестировщик должен проверить все возможные и невозможные сценарии их поведения и убедиться, что программа продолжит работать.&nbsp;</p><p>Вообще, у тестирования есть философия, которая строится на том, что в любой программе по определению есть ошибки и найти их все невозможно. А если вы почему-то не нашли ошибку, значит, просто плохо искали. Удачный тест для тестировщика — тот, при котором нашли баг. А если всё нормально работало, значит, тест неудачный и свою задачу не выполняет.&nbsp;</p><p>Ошибки возникают не только при программировании, но и при проектировании системы, и даже на этапе разработки технического задания. Поэтому и тестируют код не только в самом конце работы, а на разных этапах.&nbsp;</p><p>Есть несколько видов тестирования:&nbsp;</p><p><ul><li><span style=\"font-weight: bold;\">Статическое</span>, без запуска программы, и <span style=\"font-weight: bold;\">динамическое </span>— с запуском. Статическое обычно делают в самом начале работы: инженеры проверяют проектную документацию и спецификации, вычитывают уже написанный код. Затем проводят динамическое тестирование: программу запускают и проверяют, как она ведёт себя во время работы, определяют время отклика и то, насколько она загружает процессор и память.&nbsp;</li><li>С помощью <span style=\"font-weight: bold;\">функционального </span>тестирования проверяют, как программа решает задачи, нужные клиенту. При <span style=\"font-weight: bold;\">нефункциональном </span>исследуют производительность системы, её надёжность и защищённость, работу с окружением — операционной системой и оборудованием.&nbsp;</li><li>Ещё один способ — тестирование по принципу<span style=\"font-weight: bold;\"> чёрного</span> и<span style=\"font-weight: bold;\"> белого ящика</span>. В первом случае тестировщик не смотрит на код и работает только с программным интерфейсом. Он проверяет производительность программы, все ли нужные функции реализованы, ищет ошибки в её интерфейсе и поведении. Во втором — инженер имеет доступ к коду. Он проверяет структуру и логику всей программы или отдельных её компонент. Часто этим занимается сам программист.&nbsp;</li><li><span style=\"font-weight: bold;\">Ручное </span>и <span style=\"font-weight: bold;\">автоматическое</span> тестирование. В первом случае работу кода проверяют вручную, без использования программных средств. Во втором — применяют специально написанные автоматические тесты, которые постоянно обновляют.</li></ul></p>','2022-02-07 13:42:11.792793','Какие виды тестирования существуют',0,6,2),(10,1,'ACCEPTED','<p>Есть несколько уровней тестирования. Их проводят в разное время:&nbsp;</p><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p><span style=\"font-weight: bold;\">Модульное </span>тестирование делается в самом начале, когда готовы те куски кода, которые можно проверить по отдельности: объекты, классы, функции, программные модули. Тесты пишутся отдельно для каждой функции или метода. На этом этапе проверяют работоспособность части кода, нет ли регрессии — не появились ли после изменения кода ошибки там, где раньше всё работало нормально. Это самый нижний уровень тестирования, часто это делают те, кто пишет код.&nbsp;</p><p>К <span style=\"font-weight: bold;\">интеграционному </span>тестированию переходят после модульной проверки. Здесь тестируют связи между проверенными элементами и то, как программа взаимодействует с операционной системой, оборудованием.&nbsp;</p><p><span style=\"font-weight: bold;\">Системное </span>тестирование показывает, соответствует ли готовая система функциональным и нефункциональным требованиям.&nbsp;</p><p><span style=\"font-weight: bold;\">Приёмочное </span>тестирование проходит, когда заказчик принимает приложение от разработчиков. Его цель — убедиться, что продукт удовлетворяет требованиям клиента. На основании приёмочного тестирования покупатель решает, готова ли программа или её нужно дорабатывать.&nbsp;</p></blockquote><p>В зависимости от этапа разработки перед тестировщиками стоят разные цели:&nbsp;</p><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p><span style=\"font-weight: bold;\">Когда пишется код</span>, нужно найти как можно больше сбоев и дефектов, чтобы их исправить.&nbsp;</p><p><span style=\"font-weight: bold;\">Во время приёмочного тестирования</span> нужно показать заказчику, что система работает без ошибок.&nbsp;</p><p><span style=\"font-weight: bold;\">На этапе сопровождения</span> <span style=\"font-weight: bold;\">программы </span>тестирование помогает исправить баги, которые появились в коде после изменения.</p></blockquote><p><span style=\"font-style: italic;\">Не бывает идеального тестирования: в принципе невозможно доказать, что программа работает правильно при любых условиях. Но тестировщики могут найти и уточнить, в каких условиях она работает неправильно.</span></p>','2022-02-11 13:46:07.274902','Что тестируют на разных этапах разработки',0,6,2),(11,1,'ACCEPTED','<p>Как правило, тестировщики начинают работать с программой сразу после начала проекта:&nbsp;</p><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p><span style=\"font-weight: bold;\">Составляют тест-план</span>, где описан весь объём работ по тестированию и определено, когда их можно закончить. Это примерный документ — в процессе разработки в него не раз внесут изменения: уточнят стратегию и виды тестирования, расписание работ и так далее.&nbsp;</p><p><span style=\"font-weight: bold;\">Разрабатывают тест-кейсы</span> — перечень конкретных действий и сценарии для проверки каких-то определённых функций программы.&nbsp;</p><p><span style=\"font-weight: bold;\">Решают, нужна ли автоматизация</span>: стоит ли разрабатывать и запускать автоматические тесты или можно обойтись ручным тестированием.&nbsp;</p></blockquote><p>После выхода каждой новой сборки программы сначала делают дымовое тестирование — проверяют, что приложение запускается и выполняет основные функции. Если всё в порядке, программу передают на дальнейшее тестирование. Если нет — сразу возвращают на доработку.&nbsp;</p><p>Следующий этап — регрессионное тестирование. Тестировщики ищут баги в новых участках кода и в тех местах, где исправляли ранее найденные ошибки.&nbsp;</p><p>После этого программу проверяют на разных уровнях: испытывают её функциональность, производительность, работу с окружением. Это можно делать вручную или с помощью автоматических тест-кейсов.&nbsp;</p><p>Автоматизированное тестирование облегчает проверку и экономит время. Лучше всего это работает в сложных приложениях с большой функциональностью.&nbsp;</p><p><span style=\"font-style: italic;\">Когда есть результат, инженеры-тестировщики готовят отчёт по тестированию и отправляют его разработчикам, чтобы те исправили найденные баги. Так происходит от версии к версии, пока результаты не будут удовлетворять критериям, описанным в тест-плане.</span></p>','2022-02-13 13:49:37.508231','Как обычно проходит тестирование',0,1,2),(12,1,'ACCEPTED','<p>Тестированием программы занимаются специалисты по контролю качества программного обеспечения — QA-инженеры. У них есть разные специализации: тестировщики баз данных, специалисты по автоматизированному тестированию, аналитики, разработчики тестов, специалисты по безопасности приложений и другие.</p><p>Если проект большой, над ним работает целая команда: одни тестировщики готовят тесты, другие проверяют их полноту и логику, третьи занимаются непосредственно тестированием. Над небольшими задачами может работать один специалист, причём удалённо.</p><p>Сейчас тестировщики — одни из самых востребованных IT-специалистов. Появляется множество новых программ, и каждой из них нужен контроль качества.</p><p>Средняя зарплата тестировщика в Москве больше 120 тысяч рублей, а по регионам — примерно 60–70 тысяч. На скриншотах ниже — данные с HeadHunter. В июне 2022 года там было 2000 открытых вакансий.</p><p><img src=\"/upload/f2/e7/2e/165589509478-84d.jpg\"><br></p><p>В описаниях вакансий работодатели предлагают зарплаты от 45 до 300 тысяч рублей и выше — смотря как договоритесь :)</p><p><img src=\"/upload/37/23/13/165589519782-472.jpg\"><br></p><p>В среднем по России на одну вакансию приходится семь резюме от ищущих работу. Чаще всего нужны опытные тестировщики, но есть места и для начинающих.&nbsp;</p><h4>Что в итоге</h4><p>Тестирование — увлекательная и многогранная профессия. Она подходит людям усидчивым и ответственным, тем, кто любит искать решения сложных задач.&nbsp;</p><p>У начинающих QA-инженеров есть перспектива роста: можно построить карьеру от джуна до сеньора, стать руководителем группы. Можно выбирать специализацию по душе, а в дальнейшем переквалифицироваться в разработчика, проектного менеджера, бизнес-аналитика.&nbsp;</p><p>Современный тестировщик должен много знать и уметь, чтобы стать востребованным специалистом. Ему нужно освоить виды и методы тестирования, изучить языки программирования, уметь заполнять техническую документацию.</p>','2022-02-19 13:59:24.996252','Кто всё это делает: немного о профессии тестировщика',0,1,2),(13,1,'DECLINED','<span style=\"font-family: Graphik, sans-serif; font-size: 20px;\">Профессия Инженер по тестированию</span>','2021-11-12 13:58:41.744223','Профессия Инженер по тестированию',0,6,2),(14,1,'DECLINED','Для парсинга используют разные языки программирования: Python, JavaScript или даже Go. На самом деле инструмент не так важен, но некоторые языки делают парсинг удобнее за счёт наличия специальных библиотек — например, Beautiful Soup в Python.\n\nВ этой статье разберёмся в основах парсинга — вспомним про структуру HTML-запроса и спарсим сведения о погоде с сервиса «Яндекса».','2022-06-22 14:00:37.440876','Парсинг сайта',0,1,2),(15,1,'ACCEPTED','<p>Начнём с элементарного сокращения, которое наверняка попадалось вам много раз. <span style=\"font-weight: bold;\">DRY </span>(англ. dry — сухой, сушить) — основополагающий принцип разработки. Он расшифровывается как <span style=\"font-weight: bold;\">Don’t repeat yourself</span> — «не повторяйтесь».</p><p>Когда пишете код, всегда думайте о том, как можно переиспользовать тот или иной фрагмент, что можно выделить в универсальную функцию или класс, сделать модулем. При этом речь не идёт о создании библиотек под каждую неодноразовую функцию — я имею в виду очень похожую логику, которая встречается в нескольких местах, которую, возможно, есть смысл вынести в функцию. А если в нескольких местах определена одна и та же функция, то её можно вынести в общий модуль. Ну и, наконец, если вы часто используете один и тот же модуль, вероятно, из него можно сделать библиотеку.</p><p>Другими словами, don’t repeat yourself, понимаете?</p><p>Этот принцип полезен всегда, вне зависимости от платформы или языка. Допустим, вам надо автоматизировать некое поведение. Чтобы не прописывать несколько раз одну и ту же логику и не раздувать код без нужды, попробуйте обобщить её и вынести в отдельный элемент.</p><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p><span style=\"font-style: italic;\">Лайфхак: принцип DRY не нужно ограничивать одним репозиторием. Чтобы упростить доступ к модулям или компонентам при работе с разными репозиториями, используйте Bit (вот его страница на GitHub). Он поддерживает Node.js, TypeScript, React, Vue.js, Angular и другие фреймворки.</span></p></blockquote>','2022-03-22 14:04:20.935317','DRY',0,6,3),(16,1,'ACCEPTED','<p>Эта аббревиатура (англ. <span style=\"font-weight: bold;\">kiss </span>— поцелуй, целовать) мне самому всегда нравилась — как по форме, так и по значению: <span style=\"font-weight: bold;\">Keep it simple, stupid</span> («Сделай это проще, тупица») или, если кому-то не нравится называться тупицей, есть вариант <span style=\"font-weight: bold;\">Keep it stupid simple</span> («Пусть всё будет простым до безобразия»), который ещё лучше передаёт смысл аббревиатуры.</p><p>Решая какую-нибудь проблему, можно так увлечься, что сам не заметишь, как уже занялся оверинжинирингом или, как я люблю говорить, вовсю палишь из пушки по воробьям. Задача в итоге, конечно, будет решена — но её можно было бы выполнить куда проще и изящнее.</p><p>Не спорю, бывают, конечно, и обратные ситуации. Слишком простой код или простая архитектура могут оказаться неэффективными, и тогда в логику придётся добавлять чуть больше сложности. Но всё равно надо каждый раз себя спрашивать, соблюдается ли принцип KISS.</p><p>Проверяйте, достаточно ли понятны ваши логические цепочки. Хватит ли знаний вашим коллегам, чтобы в них разобраться? Простой код и простой дизайн уменьшают риск ошибок, да и читать такой код проще. В общем, не забывайте про KISS!</p>','2022-04-08 14:06:04.023190','KISS',1,6,3),(17,1,'ACCEPTED','<p>Это ещё одно общее правило программирования. Расшифровывается оно так:</p><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p><span style=\"font-weight: bold;\">Single responsibility principle</span> (принцип единственной ответственности).</p><p><span style=\"font-weight: bold;\">Open-closed principle</span> (принцип открытости/закрытости).&nbsp;</p><p><span style=\"font-weight: bold;\">Liskov substitution principle</span> (принцип подстановки Лисков).&nbsp;</p><p><span style=\"font-weight: bold;\">Interface segregation principle</span> (принцип разделения интерфейса).</p><p><span style=\"font-weight: bold;\">Dependency inversion principle</span> (принцип инверсии зависимостей).</p></blockquote><p>Получается, что это пять разных принципов в одном (англ. solid — твёрдый, плотный, прочный). Рассмотрим каждый по отдельности.</p><h3>1. Single responsibility principle, принцип единственной ответственности&nbsp;</h3><p>Он говорит о том, что каждая ваша функция должна выполнять только одну задачу.</p><p>Если вы знакомы с *NIX-системами, такими как дистрибутивы Linux, macOS и прочие, то наверняка имели дело с их терминалом и командами, например ls или cd. Они строго следуют принципу SRP — выполняют только один тип задачи (скажем, меняют директорию или выводят список её содержимого). Вы не найдёте такой утилиты, которая позволяла бы выполнить сразу несколько задач (в нашем примере — изменить директорию и вывести список её содержимого). Это даже называется UNIX-way.</p><p>Чтобы иметь только одну ответственность, функции должны быть простыми. Если же нужно более сложное поведение, придётся объединять вводы и выводы нескольких функций и делать композицию.</p><p>И хоть я и говорю сейчас о функциях, принцип SRP применим практически ко всему. Взять, например, архитектуру какой-нибудь платформы. Её гораздо проще обслуживать и развивать, если вместо мегамодуля, ответственного вообще за всё, у вас будет несколько микросервисов, каждый из которых отвечает за свою маленькую задачу. Но — ещё раз — то же касается и функций: более простые и понятные функции легче поддерживать, читать, понимать и даже просто писать.</p><p>Например, если вам нужна функция getUserAndRelatedBooks, в которой прописана логика двух задач, подумайте о том, чтобы разбить её на две функции: getUser и getUsersBooks, где вторая будет получать на вход результат выполнения первой. Так вы сможете изящно реализовать getUserAndRelatedBooks, просто указав getUsersBooks (getUser), то есть объединив их в композицию.</p><h3>2. Open-closed principle, принцип открытости/закрытости&nbsp;</h3><p>Он говорит о том, что ваши модули или библиотеки (в зависимости от того, как экспортируется код) должны быть открыты для расширения (например, расширения поведения), но закрыты для модификации (ибо ни у кого нет желания возиться с чужим модулем).</p><p>Если вы заметили, что для добавления в ваш код нового поведения или расширения уже существующего его приходится править, — поздравляю, вы успешно пренебрегли принципом открытости-закрытости! :)</p><p>Вот наглядный пример — приведённый код нарушает этот принцип. Потому что, если понадобится добавить ещё один город, придётся открывать сам файл и вносить изменения в массив knownCities.</p><p><img src=\"/upload/c4/1b/96/165589649623-2e0.jpg\"><br></p><p>А вот как можно решить эту проблему и соблюсти принцип открытости/закрытости.</p><p><img src=\"/upload/d4/ef/fc/165589659775-c78.jpg\"><br></p><p>Как видим, с помощью метода addValidCity можно расширить поведение кода под свои задачи, без необходимости править файл.</p><h3>3. Liskov substitution principle, принцип подстановки Лисков&nbsp;</h3><p>Этот принцип, также известный как LSP, максимально приближает нас собственно к теории программирования. Сильно углубляться в неё я не буду — просто опишу суть принципа подстановки.</p><p>Функции, которые используют указатели или ссылки на базовые классы, должны иметь возможность использовать подтипы базового типа, ничего не зная об их существовании.</p><p>Сразу же бросается в глаза, что мы здесь явно имеем дело с принципом ООП, который помогает правильно применять наследование, когда это необходимо, и использовать альтернативные варианты, когда наследование не нужно.</p><p>Рассмотрим это на примере. В геометрии квадрат — это разновидность прямоугольника. По сути, это прямоугольник с одинаковыми шириной и длиной. Если попытаться смоделировать это с помощью кода, можно получить примерно следующее:</p><p><img src=\"/upload/b6/8b/41/165589668372-060.jpg\"><br></p><p>В абстракции тут нет смысла: методы setWidth и setHeight ничего не меняют, квадрата из прямоугольника не получится — а это не то, что нам нужно. Итак, приведённый выше код нарушает принцип подстановки Лисков.</p><p>Другими словами, LSP гарантирует правильное использование наследования в вашем коде. Так что, как бы странно он для вас ни звучал, помнить о нём при создании классов всё-таки стоит.</p><h3>4. Interface segregation principle, принцип разделения интерфейса</h3><p>Он говорит о том, что нельзя заставлять программистов, работающих с вашим кодом, использовать ненужные методы. Ведь интерфейс — это всего лишь взаимодействие классов (набор методов, которые необходимо реализовать). Поэтому при создании интерфейсов (например, в TypeScript) убедитесь, что методы, которые требуется реализовать, действительно нужны вашим пользователям, — и не городите в одном интерфейсе кучу функциональности. Разделяйте и властвуйте.</p><p><img src=\"/upload/07/2d/54/165589680056-ce4.jpg\"><br></p><p>Рассмотрим этот код. Возможно, при работе с MyModule кому-то и захочется реализовать методы close и open, но если не требуется обеспечить совместимость с IE8, то последний из трёх перечисленных в коде методов точно не понадобится.</p><p>Иными словами, принцип разделения интерфейсов имеет дело с дизайном. Соблюдая его, отделяйте методы друг от друга — пусть пользователи сами решают, какие из них применять и для каких задач.</p><h3>5. Dependency inversion principle, принцип инверсии зависимостей&nbsp;</h3><p>Концепцию SOLID замыкает принцип инверсии, или внедрения, зависимостей.</p><p>По классике он звучит так:</p><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p>Модули верхних уровней не должны импортировать сущности из модулей нижних уровней. Оба типа модулей должны зависеть от абстракций.</p><p>Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.&nbsp;</p></blockquote><p>Это очень полезный инструмент для многих сценариев, например для юнит-тестирования. Если вы тестируете код, который зависит от сторонней библиотеки, вы можете внедрить мок этой библиотеки для контроля поведения кода. Давайте покажу на примере:</p><p><img src=\"/upload/ea/9e/54/165589687823-9a8.jpg\"><br></p><p>Здесь мы видим, что подключение к базе данных объявлено и выполняется внутри одного модуля, а функцию saveUser вы экспортируете. Если теперь попытаться протестировать код, эта функция автоматически постарается выполнить свою первоначальную задачу — подключиться к базе данных и сохранить данные пользователя в ней.</p><p>Однако если разрешить внедрение зависимостей и принять соединение с базой данных (которое и является зависимостью) в качестве второго параметра, то можно внедрять мок дальше:</p><p><img src=\"/upload/7f/b7/96/16558969092f-155.jpg\"><br></p><p>Теперь можно даже переключать зависимости — например, использовать другой модуль для подключения к базе данных — на коде это не отразится, он всё так же будет отрабатывать необходимую логику.</p><p>Внедрение зависимостей — замечательный инструмент. Он позволяет создавать расширяемый дизайн и очень нужен тем, кому при разработке важна расширяемость. Учитывайте это в своей работе.</p>','2022-02-11 14:25:51.850546','SOLID',0,1,3),(18,1,'ACCEPTED','<p>Принцип, иначе известный как <span style=\"font-weight: bold;\">You ain’t gonna need it</span> («Вам это не понадобится»), пришёл из экстремального программирования. Согласно ему создавать какую-то функциональность следует только тогда, когда она действительно нужна.&nbsp;</p><p>Дело в том, что в рамках Agile-методологий нужно фокусироваться только на текущей итерации проекта. Работать на опережение, добавляя в проект больше функциональности, чем требуется в данный момент, — не очень хорошая идея, учитывая, как быстро могут меняться планы.</p><p>Что я имею в виду, говоря про смену планов? Итерации в Agile довольно короткие — то есть вы будете получать какой-то фидбэк уже на ранних этапах разработки, и потенциально он может изменить направление всей работы над проектом. Так зачем вам тратить время на функцию, которая в итоге окажется совершенно ненужной?</p><p>Однако замечу напоследок, что если вы используете методы каскадной разработки, где вся работа планируется заранее и все стараются чётко придерживаться плана, принцип YAGNI неприменим.</p>','2022-04-17 14:27:35.427188','YAGNI',0,6,3),(19,1,'ACCEPTED','<p>Если отойти от программирования, можно вспомнить и другие аббревиатуры, которые часто используются в нашей отрасли. MVP означает <span style=\"font-weight: bold;\">Minimum viable product</span> (минимально жизнеспособный продукт) и предполагает создание минимально необходимой функциональности, которая помогает понять, как продукт работает в реальных условиях и нравится ли он пользователям.&nbsp;</p><p>Этим приёмом пользуются сплошь и рядом — чтобы выяснить, стоит ли вообще тратить время на продукт и доводить его до ума. Благодаря MVP целевая аудитория уже может опробовать продукт и дать обратную связь.</p><p><img src=\"/upload/90/fb/5d/16558973925d-064.png\"><br></p>','2022-06-02 14:33:36.740160','MVP',0,6,3),(20,1,'ACCEPTED','<p>В отличие от MVP, который требует серьёзного планирования и больших затрат на разработку, <span style=\"font-weight: bold;\">Proof of concept</span> (доказательство концепции) обычно представляет собой его урезанную версию. Он используется на этапе до MVP и предназначен только для того, чтобы подтвердить или опровергнуть необходимость дополнительной функциональности.&nbsp;</p><p>По сути, PoC — своего рода расходный материал, временный код. Его пишут не для реализации, а для демонстрации проекта. Включать PoC в реальный продукт, в принципе, можно, но имейте в виду, что для доказательства одной концепции, бывает, приходится создавать несколько PoC. Корпеть над ними всеми, чтобы получить в итоге один актуальный продукт, — так себе идея. Так что его намеренно говнокодят, чтобы потом было не жалко выбрасывать.&nbsp;</p><p>Лично мне очень нравится концепция PoC — но именно как расходного материала. Это как Железный Человек и его броня Mark I: она показала, на что он способен, даже если имеет под рукой только дуговой реактор; а Mark II была уже на несколько порядков лучше.</p><p><img src=\"/upload/70/b9/87/1655897582d4-cc9.png\"><br></p>','2022-06-02 14:33:19.416103','PoC',1,1,3),(21,1,'DECLINED','https://umbrellait.ru/blog/kak-biznesu-proveryat-novuyu-ideyu-pri-pomoshhi-proof-of-concept/','2022-06-22 14:34:21.113273','Как проверять новую идею при помощи Proof of Concept',0,6,3),(22,0,'ACCEPTED','https://deniskatkov.ru/mvp-i-poc-v-chem-raznitsa-mezhdu-prototipom-i-minimalnym-zhiznesposobnym-produktom/&nbsp;<div>more content needed</div>','2022-07-22 19:17:23.628992','MVP и PoC: в чем разница между прототипом...',0,6,3),(23,1,'ACCEPTED','<p><ol><li>Что такое Java.&nbsp;</li><li>Краткая история языка Java — как возник, для чего придуман, как развивался.&nbsp;</li><li>Для каких задач используют Java.&nbsp;</li><li>В чём Java хорош до сих пор, где даёт слабину и вытесняется другими технологиями.&nbsp;</li><li>Java в энтерпрайзе, стартапах и геймдеве.&nbsp;</li><li>В чём главные фишки и сила Java.&nbsp;</li><li>В чём главные недостатки Java.&nbsp;</li><li>Java, JVM, JDK — как они соотносятся между собой.&nbsp;</li><li>Какой тулинг есть у Java, какие IDE и редакторы кода удобно использовать. Hadoop, Elasticsearch, Apache Kafka.&nbsp;</li><li>Системы сборки: Apache Maven, Gradle, Apache Ant. Зачем они нужны и что делают. В чём их сильные и слабые стороны, что выбрать для своего проекта.&nbsp;</li><li>Основные конкуренты Java как языка программирования. Конкуренты JVM-экосистемы.&nbsp;</li><li>Какие фреймворки и важные библиотеки в мире Java существуют. В чём их преимущества и недостатки.&nbsp;</li><li>Что такое Spring.&nbsp;</li><li>Какие фичи будут появляться в языке и в JVM в ближайшее время.&nbsp;</li><li>Что должен знать Java-разработчик: джун, мидл, сеньор.</li></ol></p>\n<a href =\"https://skillbox.ru/media/code/vsye-o-java-ekosistema-populyarnye-freymvorki-sistemy-sborki-jdk-jvm-i-budushchee-yazyka/\">Всё о Java: на Skillbox.ru</a>','2022-05-26 14:43:25.420669','Всё о Java: экосистема, популярные фреймворки, системы сборки, JDK, JVM и будущее языка',8,1,1),(24,1,'ACCEPTED','<p>Абстрактный класс — это класс, который содержит методы без реализации. Но зачем он такой нужен? Давайте разбираться.\n\nПредставим, что нам нужно описать несколько животных — и у каждого будет свой класс. Мы соберём их характеристики, опишем в полях и методах. У некоторых животных характеристики будут совпадать — например, и у гепарда, и у коня 4 ноги. А у некоторых — не совпадут: кролик ест траву, а тигр — других животных.&nbsp;</p><p>Однако, несмотря на несовпадение, мы можем выделить шаблонные характеристики: количество лап, издаваемый звук, приём пищи, передвижение. Эти шаблонные характеристики мы можем собрать в одном месте — абстрактном классе «Животное» и указать компилятору, что наполним их конкретными данными и поведением позже — в классах отдельных животных или групп животных.&nbsp;</p><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><p><span style=\"font-style: italic; font-weight: bold;\">Так на практике реализуется абстракция — процесс выделения наиболее важных характеристик объекта и информации об объекте. То есть мы обобщаем основную информацию о свойствах разных предметов или объектов и оставляем только самое важное, а менее важным пренебрегаем.</span></p></blockquote><p>При этом абстрактным объект класса «Животное» создать нельзя — ведь в природе «просто животного» не существует, есть только волки, лисы, бегемоты и прочие слоны.</p>\n<div style=\"color: blue;\"><a href=\"https://skillbox.ru/media/code/abstraktnye-klassy-v-java-i-ikh-otlichiya-ot-interfeysov-kratko-i-bez-vody/\" style=\"font-weight: bold;\">полная статья тут</a></div>','2022-06-23 15:45:45.823754','Абстрактные классы в Java',2,1,5),(25,1,'NEW','<img src=\"/upload/08/81/76/16585065609e-3d9.jpg\"><img src=\"/upload/b2/02/cb/165850657787-ea8.jpg\">','2022-07-22 19:16:29.404405','Images',0,NULL,4);
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag2post`
--

DROP TABLE IF EXISTS `tag2post`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tag2post` (
  `tag_id` int NOT NULL,
  `post_id` int NOT NULL,
  PRIMARY KEY (`post_id`,`tag_id`),
  KEY `FKjou6suf2w810t2u3l96uasw3r` (`tag_id`),
  CONSTRAINT `FKjou6suf2w810t2u3l96uasw3r` FOREIGN KEY (`tag_id`) REFERENCES `tags` (`id`),
  CONSTRAINT `FKpjoedhh4h917xf25el3odq20i` FOREIGN KEY (`post_id`) REFERENCES `posts` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag2post`
--

LOCK TABLES `tag2post` WRITE;
/*!40000 ALTER TABLE `tag2post` DISABLE KEYS */;
INSERT INTO `tag2post` VALUES (1,1),(2,1),(2,2),(2,3),(2,4),(2,5),(2,6),(3,1),(3,5),(3,23),(3,24),(4,2),(5,3),(6,4),(7,5),(8,8),(8,9),(8,10),(8,11),(8,12),(8,13),(8,25),(9,8),(9,12),(9,13),(10,15),(10,16),(10,17),(10,18),(10,19),(10,20),(10,21),(10,22),(11,15),(12,16),(13,17),(14,17),(15,18),(16,18),(17,19),(17,22),(18,19),(18,20),(18,21),(19,20),(19,21),(19,22),(20,22),(21,25);
/*!40000 ALTER TABLE `tag2post` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tags` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (1,'singleton'),(2,'pattern'),(3,'java'),(4,'facade'),(5,'bridge'),(6,'strategy'),(7,'obserever'),(8,'testing'),(9,'qa'),(10,'acronyms'),(11,'dry'),(12,'kiss'),(13,'TypeScript'),(14,'solid'),(15,'YAGNI'),(16,'agile'),(17,'mvp'),(18,'product'),(19,'poc'),(20,'pro'),(21,'images');
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `id` int NOT NULL AUTO_INCREMENT,
  `code` varchar(255) DEFAULT NULL,
  `email` varchar(255) NOT NULL,
  `is_moderator` tinyint NOT NULL,
  `name` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `photo` varchar(255) DEFAULT NULL,
  `reg_time` datetime(6) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb3;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'3216105ce4764d3f93864e83329c0819','abdiev.dn@yandex.by',1,'Dmitrii A','$2a$12$XTR48mbpAu3kiAgRQeAI7.FpeskayQLAUgC9NNCjfOkZPyxSJnm8C','/avatars/1.jpg','2021-02-22 10:03:14.052018'),(2,NULL,'user_one@skill.ru',0,'First User','$2a$12$6.ooxIRYUF10pf7.lZKAJeVVS4YXg7EQ7anfmH0CNeeV7QHrt6cKe','/avatars/2.jpg','2021-04-22 10:05:26.491734'),(3,NULL,'user_two@skill.ru',0,'Mr. Two','$2a$12$JWil55Oqqx/zy8fO.bCV5O5ao4qfWgiQa8uCJp2QdwOfgojUEGvYW','/avatars/3.jpg','2021-03-22 10:06:00.542193'),(4,NULL,'boomer@mail.box',0,'Bum@Boomer','$2a$12$3CIoQ5vkmonkLqqYcQWERO1.tfVuBr1rwWISAZ.IRAwKPHauMsUbm','/avatars/4.jpg','2021-05-22 10:07:04.440517'),(5,NULL,'kainart.net@yandex.ru',0,'kAin','$2a$12$dXZz4MBVHgExzQ9EpLZ7Z.O53UPuQCVkmgTlGj93TynH7zXsMi9.u','/avatars/5.jpg','2022-06-23 14:51:32.949797'),(6,NULL,'admin@admin.com',1,'Mega Admin','$2a$12$pUvydZG9KFttCVqfwfvm1OfxwRQIFbDGWNhG3enLG0YPXu7No/aay','/avatars/6.jpg','2022-06-24 09:14:21.545941');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-07-22 19:24:12
